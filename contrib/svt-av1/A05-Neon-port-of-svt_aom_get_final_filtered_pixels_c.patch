From 489446d46a2820c7b20c75df2df809f09c2318c3 Mon Sep 17 00:00:00 2001
From: Rodrigo Causarano <rodrigo_causarano@ekumenlabs.com>
Date: Tue, 20 Feb 2024 14:10:01 +0000
Subject: [PATCH 3/9] Neon port of svt_aom_get_final_filtered_pixels_c

Neon port of svt_full_distortion_kernel32_bits_c
---
 .../EbPictureOperators_Intrinsic_neon.c       |  50 +++++++
 Source/Lib/Common/Codec/common_dsp_rtcd.c     |   2 +-
 Source/Lib/Common/Codec/common_dsp_rtcd.h     |   2 +
 .../ASM_NEON/EbTemporalFiltering_neon.c       | 124 ++++++++++++++++++
 Source/Lib/Encoder/Codec/aom_dsp_rtcd.c       |   2 +-
 Source/Lib/Encoder/Codec/aom_dsp_rtcd.h       |   2 +
 test/CMakeLists.txt                           |   4 +-
 test/SpatialFullDistortionTest.cc             |  28 ++++
 test/TemporalFilterTestPlanewise.cc           |  16 +++
 9 files changed, 226 insertions(+), 4 deletions(-)

diff --git a/Source/Lib/Common/ASM_NEON/EbPictureOperators_Intrinsic_neon.c b/Source/Lib/Common/ASM_NEON/EbPictureOperators_Intrinsic_neon.c
index b63123e3..261e1314 100644
--- a/Source/Lib/Common/ASM_NEON/EbPictureOperators_Intrinsic_neon.c
+++ b/Source/Lib/Common/ASM_NEON/EbPictureOperators_Intrinsic_neon.c
@@ -285,3 +285,53 @@ void svt_aom_hadamard_32x32_neon(const int16_t *src_diff, ptrdiff_t src_stride,
         coeff += 8;
     }
 }
+
+void svt_full_distortion_kernel32_bits_neon(int32_t *coeff, uint32_t coeff_stride, int32_t *recon_coeff,
+                                            uint32_t recon_coeff_stride, uint64_t distortion_result[DIST_CALC_TOTAL],
+                                            uint32_t area_width, uint32_t area_height) {
+    int64x2_t sum1      = vdupq_n_s64(0);
+    int64x2_t sum2      = vdupq_n_s64(0);
+    uint32_t  row_count = area_height;
+    do {
+        int32_t *coeff_temp       = coeff;
+        int32_t *recon_coeff_temp = recon_coeff;
+
+        uint32_t col_count = area_width / 4;
+        do {
+            int32x4_t x0 = vld1q_s32(coeff_temp);
+            int32x4_t y0 = vld1q_s32(recon_coeff_temp);
+
+            int32x2_t x_lo = vget_low_s32(x0);
+            int32x2_t x_hi = vget_high_s32(x0);
+            int32x2_t y_lo = vget_low_s32(y0);
+            int32x2_t y_hi = vget_high_s32(y0);
+
+            sum2 = vmlal_s32(sum2, x_lo, x_lo);
+            sum2 = vmlal_s32(sum2, x_hi, x_hi);
+
+            int32x2_t x_lo_sub = vsub_s32(x_lo, y_lo);
+            int32x2_t x_hi_sub = vsub_s32(x_hi, y_hi);
+
+            int64x2_t x_lo_wide = vmull_s32(x_lo_sub, x_lo_sub);
+            int64x2_t x_hi_wide = vmull_s32(x_hi_sub, x_hi_sub);
+
+            sum1 = vaddq_s64(sum1, x_lo_wide);
+            sum1 = vaddq_s64(sum1, x_hi_wide);
+
+            coeff_temp += 4;
+            recon_coeff_temp += 4;
+        } while (--col_count);
+
+        coeff += coeff_stride;
+        recon_coeff += recon_coeff_stride;
+        row_count -= 1;
+    } while (row_count > 0);
+
+    int64x2_t tmp  = vcombine_s64(vget_high_s64(sum1), vget_low_s64(sum1));
+    int64x2_t tmp2 = vaddq_s64(sum1, tmp);
+    tmp            = vcombine_s64(vget_high_s64(sum2), vget_low_s64(sum2));
+    int64x2_t tmp3 = vaddq_s64(sum2, tmp);
+    tmp3           = vcombine_s64(vget_low_s64(tmp2), vget_low_s64(tmp3));
+
+    vst1q_s64((int64_t *)distortion_result, tmp3);
+}
diff --git a/Source/Lib/Common/Codec/common_dsp_rtcd.c b/Source/Lib/Common/Codec/common_dsp_rtcd.c
index 2f27652b..7d7b5f0a 100644
--- a/Source/Lib/Common/Codec/common_dsp_rtcd.c
+++ b/Source/Lib/Common/Codec/common_dsp_rtcd.c
@@ -878,7 +878,7 @@ void svt_aom_setup_common_rtcd_internal(EbCpuFlags flags) {
     SET_ONLY_C(svt_pack2d_16_bit_src_mul4, svt_enc_msb_pack2_d);
     SET_ONLY_C(svt_aom_un_pack2d_16_bit_src_mul4, svt_enc_msb_un_pack2_d);
     SET_ONLY_C(svt_full_distortion_kernel_cbf_zero32_bits, svt_full_distortion_kernel_cbf_zero32_bits_c);
-    SET_ONLY_C(svt_full_distortion_kernel32_bits, svt_full_distortion_kernel32_bits_c);
+    SET_NEON(svt_full_distortion_kernel32_bits, svt_full_distortion_kernel32_bits_c, svt_full_distortion_kernel32_bits_neon);
     SET_NEON(svt_spatial_full_distortion_kernel, svt_spatial_full_distortion_kernel_c, svt_spatial_full_distortion_kernel_neon);
     SET_ONLY_C(svt_full_distortion_kernel16_bits, svt_full_distortion_kernel16_bits_c);
     SET_NEON(svt_residual_kernel8bit, svt_residual_kernel8bit_c, svt_residual_kernel8bit_neon);
diff --git a/Source/Lib/Common/Codec/common_dsp_rtcd.h b/Source/Lib/Common/Codec/common_dsp_rtcd.h
index 34d61038..7e5f708d 100644
--- a/Source/Lib/Common/Codec/common_dsp_rtcd.h
+++ b/Source/Lib/Common/Codec/common_dsp_rtcd.h
@@ -1364,6 +1364,8 @@ extern "C" {
     void svt_aom_paeth_predictor_64x32_neon(uint8_t *dst, ptrdiff_t stride, const uint8_t *above,const uint8_t *left);
     void svt_aom_paeth_predictor_64x64_neon(uint8_t *dst, ptrdiff_t stride, const uint8_t *above,const uint8_t *left);
 
+    void svt_full_distortion_kernel32_bits_neon(int32_t *coeff, uint32_t coeff_stride, int32_t *recon_coeff, uint32_t recon_coeff_stride, uint64_t distortion_result[DIST_CALC_TOTAL], uint32_t area_width, uint32_t area_height);
+
 #endif
 
 #ifdef ARCH_X86_64
diff --git a/Source/Lib/Encoder/ASM_NEON/EbTemporalFiltering_neon.c b/Source/Lib/Encoder/ASM_NEON/EbTemporalFiltering_neon.c
index e6561642..0eee8047 100644
--- a/Source/Lib/Encoder/ASM_NEON/EbTemporalFiltering_neon.c
+++ b/Source/Lib/Encoder/ASM_NEON/EbTemporalFiltering_neon.c
@@ -318,3 +318,127 @@ void svt_av1_apply_temporal_filter_planewise_medium_neon(
                                                                     1);
     }
 }
+
+// Divide two int32x4 vectors
+static uint32x4_t div_u32(const uint32x4_t *a, const uint32x4_t *b) {
+    uint32x4_t result = vdupq_n_u32(0);
+    result            = vsetq_lane_u32(vdups_laneq_u32(*a, 0) / vdups_laneq_u32(*b, 0), result, 0);
+    result            = vsetq_lane_u32(vdups_laneq_u32(*a, 1) / vdups_laneq_u32(*b, 1), result, 1);
+    result            = vsetq_lane_u32(vdups_laneq_u32(*a, 2) / vdups_laneq_u32(*b, 2), result, 2);
+    result            = vsetq_lane_u32(vdups_laneq_u32(*a, 3) / vdups_laneq_u32(*b, 3), result, 3);
+    return result;
+}
+
+static void process_block_hbd_neon(int h, int w, uint16_t *buff_hbd_start, uint32_t *accum, uint16_t *count,
+                                   uint32_t stride) {
+    int i, j;
+    int pos = 0;
+    for (i = 0; i < h; i++) {
+        for (j = 0; j < w; j += 8) {
+            //buff_lbd_start[pos] = (uint8_t)OD_DIVU(accum[k] + (count[k] >> 1), count[k]);
+            //buff_lbd_start[pos] = (uint8_t)((accum[k] + (count[k] >> 1))/ count[k]);
+            uint32x4_t accum_a = vld1q_u32(accum);
+            uint32x4_t accum_b = vld1q_u32(&accum[4]);
+            accum += 8;
+
+            uint32x4_t count_a = vmovl_u16(vld1_u16(count));
+            uint32x4_t count_b = vmovl_u16(vld1_u16(&count[4]));
+            count += 8;
+
+            //accum[k] + (count[k] >> 1)
+            uint32x4_t tmp_a = vaddq_u32(accum_a, vshrq_n_u32(count_a, 1));
+            uint32x4_t tmp_b = vaddq_u32(accum_b, vshrq_n_u32(count_b, 1));
+
+            //accum[k] + (count[k] >> 1))/ count[k]
+            tmp_a             = div_u32(&tmp_a, &count_a);
+            tmp_b             = div_u32(&tmp_b, &count_b);
+            uint16x8_t tmp_ab = vqmovn_high_u32(vqmovn_u32(tmp_a), tmp_b);
+
+            vst1q_u16(buff_hbd_start + pos, tmp_ab);
+
+            pos += 8;
+        }
+        pos += stride;
+    }
+}
+
+static void process_block_lbd_neon(int h, int w, uint8_t *buff_lbd_start, uint32_t *accum, uint16_t *count,
+                                   uint32_t stride) {
+    int i, j;
+    int pos = 0;
+    for (i = 0; i < h; i++) {
+        for (j = 0; j < w; j += 8) {
+            //buff_lbd_start[pos] = (uint8_t)OD_DIVU(accum[k] + (count[k] >> 1), count[k]);
+            //buff_lbd_start[pos] = (uint8_t)((accum[k] + (count[k] >> 1))/ count[k]);
+            uint32x4_t accum_a = vld1q_u32(accum);
+            uint32x4_t accum_b = vld1q_u32(&accum[4]);
+            accum += 8;
+
+            uint32x4_t count_a = vmovl_u16(vld1_u16(count));
+            uint32x4_t count_b = vmovl_u16(vld1_u16(&count[4]));
+            count += 8;
+
+            //accum[k] + (count[k] >> 1)
+            uint32x4_t tmp_a = vaddq_u32(accum_a, vshrq_n_u32(count_a, 1));
+            uint32x4_t tmp_b = vaddq_u32(accum_b, vshrq_n_u32(count_b, 1));
+
+            //accum[k] + (count[k] >> 1))/ count[k]
+            tmp_a              = div_u32(&tmp_a, &count_a);
+            tmp_b              = div_u32(&tmp_b, &count_b);
+            uint16x8_t tmp_ab1 = vqmovn_high_u32(vqmovn_u32(tmp_a), tmp_b);
+
+            vst1_u8(buff_lbd_start + pos, vqmovn_u16(tmp_ab1));
+
+            pos += 8;
+        }
+        pos += stride;
+    }
+}
+
+void svt_aom_get_final_filtered_pixels_neon(MeContext *me_ctx, EbByte *src_center_ptr_start,
+                                            uint16_t **altref_buffer_highbd_start, uint32_t **accum, uint16_t **count,
+                                            const uint32_t *stride, int blk_y_src_offset, int blk_ch_src_offset,
+                                            uint16_t blk_width_ch, uint16_t blk_height_ch, Bool is_highbd) {
+    assert(blk_width_ch % 16 == 0);
+    assert(BW % 16 == 0);
+
+    if (!is_highbd) {
+        //Process luma
+        process_block_lbd_neon(
+            BH, BW, &src_center_ptr_start[C_Y][blk_y_src_offset], accum[C_Y], count[C_Y], stride[C_Y] - BW);
+        // Process chroma
+        if (me_ctx->tf_chroma) {
+            process_block_lbd_neon(blk_height_ch,
+                                   blk_width_ch,
+                                   &src_center_ptr_start[C_U][blk_ch_src_offset],
+                                   accum[C_U],
+                                   count[C_U],
+                                   stride[C_U] - blk_width_ch);
+            process_block_lbd_neon(blk_height_ch,
+                                   blk_width_ch,
+                                   &src_center_ptr_start[C_V][blk_ch_src_offset],
+                                   accum[C_V],
+                                   count[C_V],
+                                   stride[C_V] - blk_width_ch);
+        }
+    } else {
+        // Process luma
+        process_block_hbd_neon(
+            BH, BW, &altref_buffer_highbd_start[C_Y][blk_y_src_offset], accum[C_Y], count[C_Y], stride[C_Y] - BW);
+        // Process chroma
+        if (me_ctx->tf_chroma) {
+            process_block_hbd_neon(blk_height_ch,
+                                   blk_width_ch,
+                                   &altref_buffer_highbd_start[C_U][blk_ch_src_offset],
+                                   accum[C_U],
+                                   count[C_U],
+                                   stride[C_U] - blk_width_ch);
+            process_block_hbd_neon(blk_height_ch,
+                                   blk_width_ch,
+                                   &altref_buffer_highbd_start[C_V][blk_ch_src_offset],
+                                   accum[C_V],
+                                   count[C_V],
+                                   stride[C_V] - blk_width_ch);
+        }
+    }
+}
diff --git a/Source/Lib/Encoder/Codec/aom_dsp_rtcd.c b/Source/Lib/Encoder/Codec/aom_dsp_rtcd.c
index e441e376..ce7297d2 100644
--- a/Source/Lib/Encoder/Codec/aom_dsp_rtcd.c
+++ b/Source/Lib/Encoder/Codec/aom_dsp_rtcd.c
@@ -835,7 +835,7 @@ void svt_aom_setup_rtcd_internal(EbCpuFlags flags) {
     SET_ONLY_C(svt_av1_apply_zz_based_temporal_filter_planewise_medium_hbd, svt_av1_apply_zz_based_temporal_filter_planewise_medium_hbd_c);
     SET_NEON(svt_av1_apply_temporal_filter_planewise_medium, svt_av1_apply_temporal_filter_planewise_medium_c, svt_av1_apply_temporal_filter_planewise_medium_neon);
     SET_ONLY_C(svt_av1_apply_temporal_filter_planewise_medium_hbd, svt_av1_apply_temporal_filter_planewise_medium_hbd_c);
-    SET_ONLY_C(get_final_filtered_pixels, svt_aom_get_final_filtered_pixels_c);
+    SET_NEON(get_final_filtered_pixels, svt_aom_get_final_filtered_pixels_c, svt_aom_get_final_filtered_pixels_neon);
     SET_ONLY_C(apply_filtering_central, svt_aom_apply_filtering_central_c);
     SET_ONLY_C(apply_filtering_central_highbd, svt_aom_apply_filtering_central_highbd_c);
     SET_NEON(downsample_2d, svt_aom_downsample_2d_c, svt_aom_downsample_2d_neon);
diff --git a/Source/Lib/Encoder/Codec/aom_dsp_rtcd.h b/Source/Lib/Encoder/Codec/aom_dsp_rtcd.h
index cf779226..a77cc503 100644
--- a/Source/Lib/Encoder/Codec/aom_dsp_rtcd.h
+++ b/Source/Lib/Encoder/Codec/aom_dsp_rtcd.h
@@ -1132,6 +1132,8 @@ extern "C" {
     int8_t svt_av1_wedge_sign_from_residuals_neon(const int16_t *ds, const uint8_t *m, int N, int64_t limit);
     uint32_t hadamard_path_neon(Buf2D residualBuf, Buf2D coeffBuf, Buf2D inputBuf, Buf2D predBuf, BlockSize bsize);
 
+    void svt_aom_get_final_filtered_pixels_neon(struct MeContext *me_ctx, EbByte *src_center_ptr_start, uint16_t **altref_buffer_highbd_start, uint32_t **accum, uint16_t **count, const uint32_t *stride, int blk_y_src_offset, int blk_ch_src_offset, uint16_t blk_width_ch, uint16_t blk_height_ch, Bool is_highbd);
+
 #endif
 
 #ifdef ARCH_X86_64
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index c97174ee..aeea7168 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -83,11 +83,12 @@ set(arch_neutral_files
 
 set(multi_arch_files
     FwdTxfm2dAsmTest.cc
-    TemporalFilterTestPlanewise.cc
     PictureOperatorTest.cc
     SadTest.cc
     selfguided_filter_test.cc
     CdefTest.cc
+    SpatialFullDistortionTest.cc
+    TemporalFilterTestPlanewise.cc
     )
 
 if(HAVE_X86_PLATFORM)
@@ -119,7 +120,6 @@ if(HAVE_X86_PLATFORM)
         ResidualTest.cc
         RestorationPickTest.cc
         SelfGuidedUtilTest.cc
-        SpatialFullDistortionTest.cc
         VarianceTest.cc
         WedgeUtilTest.cc
         av1_convolve_scale_test.cc
diff --git a/test/SpatialFullDistortionTest.cc b/test/SpatialFullDistortionTest.cc
index 007753e9..4298dc41 100644
--- a/test/SpatialFullDistortionTest.cc
+++ b/test/SpatialFullDistortionTest.cc
@@ -183,6 +183,8 @@ TEST_P(SpatialFullDistortionTest, DISABLED_Speed) {
     RunSpeedTest();
 }
 
+#ifdef ARCH_X86_64
+
 INSTANTIATE_TEST_CASE_P(
     AVX2, SpatialFullDistortionTest,
     ::testing::Values(svt_spatial_full_distortion_kernel_avx2));
@@ -197,6 +199,8 @@ INSTANTIATE_TEST_CASE_P(
     ::testing::Values(svt_spatial_full_distortion_kernel_avx512));
 #endif
 
+#endif
+
 typedef enum { VAL_MIN, VAL_MAX, VAL_RANDOM } TestPattern;
 TestPattern TEST_PATTERNS[] = {VAL_MIN, VAL_MAX, VAL_RANDOM};
 typedef std::tuple<uint32_t, uint32_t> AreaSize;
@@ -367,6 +371,9 @@ void SpatialFullDistortionKernelFuncTest::RunCheckOutput() {
 TEST_P(SpatialFullDistortionKernelFuncTest, SpatialKernelFuncTest) {
     RunCheckOutput();
 }
+
+#ifdef ARCH_X86_64
+
 #if EN_AVX512_SUPPORT
 INSTANTIATE_TEST_CASE_P(
     SpatialKernelFunc, SpatialFullDistortionKernelFuncTest,
@@ -387,6 +394,7 @@ INSTANTIATE_TEST_CASE_P(
                           svt_spatial_full_distortion_kernel_avx2)));
 #endif
 
+#endif
 class FullDistortionKernel16BitsFuncTest
     : public SpatialFullDistortionFuncTestBase,
       public ::testing::WithParamInterface<SpatialKernelTestParam> {
@@ -548,6 +556,8 @@ TEST_P(FullDistortionKernel16BitsFuncTest, DISABLED_Speed) {
     RunSpeedTest();
 }
 
+#ifdef ARCH_X86_64
+
 INSTANTIATE_TEST_CASE_P(
     FullDistortionKernel16FuncTest_SSE4_1, FullDistortionKernel16BitsFuncTest,
     ::testing::Combine(
@@ -562,6 +572,8 @@ INSTANTIATE_TEST_CASE_P(
         ::testing::ValuesIn(TEST_PATTERNS),
         ::testing::Values(svt_full_distortion_kernel16_bits_avx2)));
 
+#endif
+
 typedef void (*fullDistortionKernel32BitsFunc)(
     int32_t *coeff, uint32_t coeff_stride, int32_t *recon_coeff,
     uint32_t recon_coeff_stride, uint64_t distortion_result[DIST_CALC_TOTAL],
@@ -640,6 +652,8 @@ TEST_P(fullDistortionKernel32Bits, CheckOutput) {
     RunCheckOutput();
 }
 
+#ifdef ARCH_X86_64
+
 INSTANTIATE_TEST_CASE_P(
     SSE4_1, fullDistortionKernel32Bits,
     ::testing::Values(svt_full_distortion_kernel32_bits_sse4_1));
@@ -648,6 +662,16 @@ INSTANTIATE_TEST_CASE_P(
     AVX2, fullDistortionKernel32Bits,
     ::testing::Values(svt_full_distortion_kernel32_bits_avx2));
 
+#endif
+
+#ifdef ARCH_AARCH64
+
+INSTANTIATE_TEST_CASE_P(
+    NEON, fullDistortionKernel32Bits,
+    ::testing::Values(svt_full_distortion_kernel32_bits_neon));
+
+#endif
+
 typedef void (*fullDistortionKernelCbfZero32BitsFunc)(
     int32_t *coeff, uint32_t coeff_stride,
     uint64_t distortion_result[DIST_CALC_TOTAL], uint32_t area_width,
@@ -708,6 +732,8 @@ TEST_P(fullDistortionKernelCbfZero32Bits, CheckOutput) {
     RunCheckOutput();
 }
 
+#ifdef ARCH_X86_64
+
 INSTANTIATE_TEST_CASE_P(
     SSE4_1, fullDistortionKernelCbfZero32Bits,
     ::testing::Values(svt_full_distortion_kernel_cbf_zero32_bits_sse4_1));
@@ -716,4 +742,6 @@ INSTANTIATE_TEST_CASE_P(
     AVX2, fullDistortionKernelCbfZero32Bits,
     ::testing::Values(svt_full_distortion_kernel_cbf_zero32_bits_avx2));
 
+#endif
+
 }  // namespace
diff --git a/test/TemporalFilterTestPlanewise.cc b/test/TemporalFilterTestPlanewise.cc
index d15a31d9..3aeac6a6 100644
--- a/test/TemporalFilterTestPlanewise.cc
+++ b/test/TemporalFilterTestPlanewise.cc
@@ -1132,6 +1132,22 @@ TEST_F(TemporalFilterTestGetFinalFilteredPixels, test_hbd_avx2) {
 
 #endif
 
+#ifdef ARCH_AARCH64
+
+TEST_F(TemporalFilterTestGetFinalFilteredPixels, test_lbd_neon) {
+    for (int i = 0; i < 100; ++i) {
+        RunTest(false, svt_aom_get_final_filtered_pixels_neon);
+    }
+}
+
+TEST_F(TemporalFilterTestGetFinalFilteredPixels, test_hbd_neon) {
+    for (int i = 0; i < 100; ++i) {
+        RunTest(true, svt_aom_get_final_filtered_pixels_neon);
+    }
+}
+
+#endif
+
 typedef void (*apply_filtering_central_fn)(
     struct MeContext *me_ctx, EbPictureBufferDesc *input_picture_ptr_central,
     EbByte *src, uint32_t **accum, uint16_t **count, uint16_t blk_width,
-- 
2.39.3 (Apple Git-146)

